{
	"info": {
		"_postman_id": "cf832a1e-3a60-4e4e-8af6-e8ffd7a26e39",
		"name": "REST API basics: CRUD, test & variable",
		"description": "# ðŸš€\n\nStartFragmentThis template provides a guide for performing CRUD operations (GET, POST, PUT, DELETE), managing variables, and running tests. **Important:** The collection run will only pass successfully the first time it is executed. This is because some blueprints will have already been inserted, causing an error in the POST request.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. The structure for a Blueprint object is something like this:\n\n```\n{\n    \"author\": \"Samuel Hernandez\",\n    \"name\": \"Plano construccion polideportivo escuela colombiana de ingenieria.\",\n    \"points\": [\n        {\"x\": 0, \"y\": 0},\n        {\"x\": 0, \"y\": 1},\n        {\"x\": 1, \"y\": 1},\n        {\"x\": 1, \"y\": 0}\n    ]\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [http://localhost/blueprint](https://postman-api-learner.glitch.me).\n\n#### **Step 5: Tests in the \"Scripts\" tab**\n\nWe add some test to validate the status code of a response.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33334270",
		"_collection_link": "https://testeci.postman.co/workspace/TestEci-Workspace~1d36ca68-dbcc-4fe9-8928-836eb052ae5b/collection/33334270-cf832a1e-3a60-4e4e-8af6-e8ffd7a26e39?action=share&source=collection_link&creator=33334270"
	},
	"item": [
		{
			"name": "Post data(0)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"author\": \"Samuel Hernandez\",\n    \"name\": \"Plano construccion polideportivo escuela colombiana de ingenieria.\",\n    \"points\": [\n        {\"x\": 0, \"y\": 0},\n        {\"x\": 0, \"y\": 1},\n        {\"x\": 1, \"y\": 1},\n        {\"x\": 1, \"y\": 0}\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/blueprint/add",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"blueprint",
						"add"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Post data(1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"author\": \"Alfonso Paez\",\r\n    \"name\": \"Plano cuadrado.\",\r\n    \"points\": [\r\n        {\"x\": 0, \"y\": 0},\r\n        {\"x\": 0, \"y\": 2},\r\n        {\"x\": 2, \"y\": 2},\r\n        {\"x\": 2, \"y\": 0},\r\n        {\"x\": 2, \"y\": 0}\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/blueprint/add",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"blueprint",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post data(2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"author\": \"Alfonso Paez\",\r\n    \"name\": \"Plano rectangular.\",\r\n    \"points\": [\r\n        {\"x\": 0, \"y\": 0},\r\n        {\"x\": 0, \"y\": 2},\r\n        {\"x\": 4, \"y\": 2},\r\n        {\"x\": 4, \"y\": 0}\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/blueprint/add",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"blueprint",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/blueprint/get?author=Samuel Hernandez&name=Plano construccion polideportivo escuela colombiana de ingenieria.",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"blueprint",
						"get"
					],
					"query": [
						{
							"key": "author",
							"value": "Samuel Hernandez"
						},
						{
							"key": "name",
							"value": "Plano construccion polideportivo escuela colombiana de ingenieria."
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get all data(0)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/blueprint/getAll",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"blueprint",
						"getAll"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get data by author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/blueprint/getByAuthor?author=Alfonso Paez",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"blueprint",
						"getByAuthor"
					],
					"query": [
						{
							"key": "author",
							"value": "Alfonso Paez"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Update data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"author\": \"Samuel Hernandez\",\n    \"name\": \"Plano construccion polideportivo escuela colombiana de ingenieria.\",\n    \"points\": [\n        {\"x\": 0, \"y\": 0},\n        {\"x\": 0, \"y\": 10},\n        {\"x\": 10, \"y\": 10},\n        {\"x\": 10, \"y\": 0}\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/blueprint/update",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"blueprint",
						"update"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/blueprint/delete?author=Alfonso Paez&name=Plano rectangular.",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"blueprint",
						"delete"
					],
					"query": [
						{
							"key": "author",
							"value": "Alfonso Paez"
						},
						{
							"key": "name",
							"value": "Plano rectangular."
						}
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Get all data(1)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/blueprint/getAll",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"blueprint",
						"getAll"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get all data(2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/blueprint/getAll?filter=subsampling",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"blueprint",
						"getAll"
					],
					"query": [
						{
							"key": "filter",
							"value": "subsampling"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get all data(3)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/blueprint/getAll?filter=redundancy",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"blueprint",
						"getAll"
					],
					"query": [
						{
							"key": "filter",
							"value": "redundancy"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "http://localhost:8080"
		}
	]
}